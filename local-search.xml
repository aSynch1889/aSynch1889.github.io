<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>App Store 预览图规范</title>
    <link href="/2025/02/27/App%20Store%20%E9%A2%84%E8%A7%88%E5%9B%BE%E8%A7%84%E8%8C%83/"/>
    <url>/2025/02/27/App%20Store%20%E9%A2%84%E8%A7%88%E5%9B%BE%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h5 id="iPhone-6-9-英寸显示屏"><a href="#iPhone-6-9-英寸显示屏" class="headerlink" title="iPhone 6.9 英寸显示屏"></a>iPhone 6.9 英寸显示屏</h5><p>将最多 3 个 6.7 英寸或 6.9 英寸 iPhone 显示屏 App 预览和 10 张截屏拖移至此处。</p><p>(1320 × 2868px、2868 × 1320px、1290 × 2796px 或 2796 × 1290px)</p><h5 id="iPhone-6-5英寸显示屏"><a href="#iPhone-6-5英寸显示屏" class="headerlink" title="iPhone 6.5英寸显示屏"></a>iPhone 6.5英寸显示屏</h5><p>将最多 3 个 App 预览和最多 10 张截屏拖到此处。</p><p>(1242 × 2688px、2688 × 1242px、1284 × 2778px 或 2778 × 1284px)</p><h5 id="iPad-13-英寸显示屏"><a href="#iPad-13-英寸显示屏" class="headerlink" title="iPad 13 英寸显示屏"></a>iPad 13 英寸显示屏</h5><p>将最多 3 个 12.9 英寸或 13 英寸显示屏 iPad 的 App 预览和 10 张截屏拖移至此处。</p><p>(2064 × 2752px、2752 × 2064px、2048 × 2732px 或 2732 × 2048px)</p><h5 id="Apple-Watch"><a href="#Apple-Watch" class="headerlink" title="Apple Watch"></a>Apple Watch</h5><h5 id="Ultra-2、Series-10、9、6、3"><a href="#Ultra-2、Series-10、9、6、3" class="headerlink" title="Ultra 2、Series 10、9、6、3"></a>Ultra 2、Series 10、9、6、3</h5><p>将最多 10 张 Ultra 2（410 x 502 像素）、Series 10（416 x 496 像素）、Series 9（396 x 484 像素）、Series 6（368 x 448 像素）或 Series 3（312 x 390 像素）的截屏拖移至此处</p><h5 id="imessag-app"><a href="#imessag-app" class="headerlink" title="imessag app"></a>imessag app</h5><p>将最多 10 张 6.7 英寸或 6.9 英寸 iPhone 显示屏截屏拖移至此处。</p><p>(1320 × 2868px、2868 × 1320px、1290 × 2796px 或 2796 × 1290px)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Language Tool多语言翻译生成工具</title>
    <link href="/2025/02/26/LanguageTool%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <url>/2025/02/26/LanguageTool%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BF%BB%E8%AF%91%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>Language Tool 是一个 macOS 应用程序，用于自动化生成多平台的多语言本地化文件。支持 iOS、Flutter 和 Electron 项目的本地化文件生成。</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>📱 支持多个平台：<ul><li>iOS: <code>.xcstrings</code> 和 <code>.strings</code> 文件</li><li>Flutter: <code>.arb</code> 文件</li><li>Electron: 本地化 <code>.json</code> 文件</li></ul></li><li>🌍 支持 50+ 种语言的自动翻译</li><li>🔄 批量翻译处理</li><li>💾 按平台生成标准格式的本地化文件</li><li>⚡️ 简单直观的用户界面</li><li>🎯 完全适配各平台的本地化工作流</li></ul><h2 id="支持的语言"><a href="#支持的语言" class="headerlink" title="支持的语言"></a>支持的语言</h2><p>包括但不限于：</p><ul><li>中文（简体、繁体、香港繁体）</li><li>英语（美国、英国、澳大利亚等变体）</li><li>日语</li><li>韩语</li><li>欧洲语言（法语、德语、西班牙语等）</li><li>东南亚语言（泰语、越南语等）</li><li>中东语言（阿拉伯语等）</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>启动应用程序<br><img src="https://raw.githubusercontent.com/aSynch1889/image/master/uPic/ktIJ4k20250225013727.png"></li><li>在设置中配置 AI 服务的 API Key<br><img src="https://raw.githubusercontent.com/aSynch1889/image/master/uPic/xTfNrr20250224113359.png"></li><li>选择目标平台（iOS&#x2F;Flutter&#x2F;Electron）</li><li>选择源文件：<ul><li>iOS: 选择 <code>.xcstrings</code> 或 <code>.strings</code> 文件</li><li>Flutter: 选择 <code>.arb</code> 文件</li><li>Electron: 选择 <code>.json</code> 文件</li></ul></li><li>选择目标语言</li><li>选择保存位置</li><li>点击”开始转换”</li><li>等待转换完成</li><li>将生成的文件添加到你的项目中：<ul><li>iOS: 添加 <code>.xcstrings</code> 或 <code>.strings</code> 文件到 Xcode 项目</li><li>Flutter: 将 <code>.arb</code> 文件放入 <code>lib/l10n</code> 目录</li><li>Electron: 将生成的 JSON 文件放入项目的语言资源目录</li></ul></li></ol><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><ul><li>macOS 13.0 或更高版本</li><li>对于 iOS 开发：Xcode 15.0 或更高版本（用于 .xcstrings 支持）</li><li>对于 Flutter 开发：Flutter SDK</li><li>对于 Electron 开发：Node.js 环境</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于这是一个开源项目，目前没有经过 Apple 公证，安装时需要一些额外步骤：</p><ol><li>从 Releases 页面下载最新的 .zip 文件</li><li>解压缩文件</li><li>将 .app 文件拖入 Applications 文件夹</li><li>首次运行时：<ul><li>右键点击应用图标</li><li>选择”打开”</li><li>在弹出的警告对话框中选择”打开”</li></ul></li></ol><p>注意：由于应用没有经过 Apple 签名，首次运行时系统会显示安全警告，这是正常的。如果你担心安全问题，可以查看源代码并自行编译。</p><h3 id="从源码构建"><a href="#从源码构建" class="headerlink" title="从源码构建"></a>从源码构建</h3><p>如果你更倾向于自己构建应用：</p><ol><li>克隆仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/aSynch1889/LanguageTool.git<br></code></pre></td></tr></table></figure></li><li>使用 Xcode 打开项目</li><li>选择 Product &gt; Build</li><li>构建完成后，应用会出现在 Xcode 的 product文件夹中</li></ol><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>Swift 5.9</li><li>SwiftUI</li><li>Xcode 15.0+</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>使用前需要配置有效的 DeepSeek AI 或者 Gemini 服务 API Key</li><li>建议在使用前备份原有的本地化文件</li><li>翻译结果可能需要人工审核以确保准确性</li><li>不同平台的本地化文件格式有所不同，请确保选择正确的平台</li></ul><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>欢迎提交 Issue 和 Pull Request！</p><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>本项目采用 MIT 许可证。详见 <a href="LICENSE">LICENSE</a> 文件。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li>DeepSeek AI、Gemini 提供翻译服务</li><li>SwiftUI 框架</li><li>所有贡献者和用户</li></ul><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>如有问题或建议，请通过 GitHub Issues 与我们联系。</p><hr><p>Made with ❤️ by [华子]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/22/github%20pages%E4%B8%8A%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%9C%89%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE/"/>
    <url>/2025/02/22/github%20pages%E4%B8%8A%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%9C%89%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>好的，以下是在 GitHub Pages 上建立个人博客网站的一些建议：</p><p><strong>1. 选择合适的静态网站生成器 (SSG)</strong></p><ul><li><strong>Jekyll:</strong>  Jekyll 是 GitHub Pages 官方推荐的 SSG，使用 Liquid 模板语言。它简单易用，适合初学者。</li><li><strong>Hexo:</strong> Hexo 使用 Markdown 编写文章，支持主题和插件，功能丰富，适合有一定经验的用户。</li><li><strong>Hugo:</strong> Hugo 使用 Go 语言编写，速度快，性能高，适合追求效率的用户。</li><li><strong>Pelican:</strong> Pelican 使用 Python 编写，支持 reStructuredText 和 Markdown，适合 Python 开发者。</li></ul><p><strong>2. 选择或自定义主题</strong></p><ul><li>许多 SSG 都有丰富的主题可供选择，可以根据自己的喜好选择合适的主题。</li><li>如果需要更个性化的风格，可以学习 HTML、CSS 和 JavaScript，自定义主题。</li></ul><p><strong>3. 编写高质量的内容</strong></p><ul><li>博客的核心是内容，高质量的文章才能吸引读者。</li><li>保持更新频率，定期发布新文章。</li><li>注意文章的排版和格式，使其易于阅读。</li></ul><p><strong>4. 优化网站性能</strong></p><ul><li>压缩图片，减小文件体积。</li><li>使用 CDN 加速访问。</li><li>优化网站代码，提高加载速度。</li></ul><p><strong>5. 使用 SEO 优化</strong></p><ul><li>设置合适的网站标题和描述。</li><li>使用关键词优化文章。</li><li>建立外部链接，提高网站权重。</li></ul><p><strong>6. 其他建议</strong></p><ul><li><strong>域名：</strong> 可以购买一个个性化的域名，使博客更具专业性。</li><li><strong>评论系统：</strong> 添加评论功能，与读者互动。</li><li><strong>统计分析：</strong> 使用 Google Analytics 等工具，了解网站访问情况。</li><li><strong>备份：</strong> 定期备份网站数据，以防丢失。</li></ul><p><strong>7. 学习资源</strong></p><ul><li><strong>GitHub Pages 官方文档：</strong> 提供了关于 GitHub Pages 的详细说明。</li><li><strong>SSG 官方文档：</strong> 提供了关于各种 SSG 的使用说明。</li><li><strong>博客教程：</strong> 网上有很多关于使用 GitHub Pages 搭建博客的教程，可以参考学习。</li></ul><p>希望这些建议能帮助你建立一个成功的个人博客网站！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TimerApp - Fitness Timer</title>
    <link href="/2025/02/21/TimerApp%20-%20Fitness%20Timer/"/>
    <url>/2025/02/21/TimerApp%20-%20Fitness%20Timer/</url>
    
    <content type="html"><![CDATA[<h1 id="TimerApp-Fitness-Timer"><a href="#TimerApp-Fitness-Timer" class="headerlink" title="TimerApp - Fitness Timer"></a>TimerApp - Fitness Timer</h1><p>Your Professional Interval Training Companion | Rhythm Your Workout</p><h2 id="App-Store-Submission-Info"><a href="#App-Store-Submission-Info" class="headerlink" title="App Store Submission Info"></a>App Store Submission Info</h2><h3 id="Subtitle-30-characters"><a href="#Subtitle-30-characters" class="headerlink" title="Subtitle (30 characters)"></a>Subtitle (30 characters)</h3><p>Smart Interval Timer for Workouts</p><h3 id="Promotional-Text-170-characters"><a href="#Promotional-Text-170-characters" class="headerlink" title="Promotional Text (170 characters)"></a>Promotional Text (170 characters)</h3><p>A simple yet powerful interval timer for your workouts. Customize your exercise and rest periods, making your training more structured and efficient. Now with Apple Watch support!</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>TimerApp is a professionally designed interval timer for fitness enthusiasts. Whether you’re working out at home or in the gym, it helps you maintain the perfect pace for your training sessions.</p><p>Key Features:<br>• Customizable exercise duration (10-120 seconds)<br>• Adjustable rest intervals (5-60 seconds)<br>• Multiple training rounds (1-5 sets)<br>• Clear visual progress display<br>• Automatic exercise&#x2F;rest switching<br>• Apple Watch support<br>• Clean, intuitive interface<br>• Sound alerts for interval changes</p><p>Perfect For:</p><ul><li>HIIT (High-Intensity Interval Training)</li><li>Strength training rest periods</li><li>Interval running</li><li>Yoga pose timing</li><li>Home workout sessions</li></ul><p>No complex setup needed - just open and start your workout. The clean interface and automatic interval switching let you focus entirely on your exercise.</p><p>Features that make your workout better:<br>• Visual countdown circle<br>• Clear exercise&#x2F;rest state indication<br>• Round counter<br>• Easy-to-read timer display<br>• Quick settings adjustment<br>• Seamless Apple Watch integration</p><p>Download TimerApp now and experience a more structured workout routine!</p><h3 id="Keywords-100-characters"><a href="#Keywords-100-characters" class="headerlink" title="Keywords (100 characters)"></a>Keywords (100 characters)</h3><p>timer,fitness,workout,interval,HIIT,exercise,gym,training,Apple Watch,health,counter,sports</p><h3 id="Screenshot-Texts"><a href="#Screenshot-Texts" class="headerlink" title="Screenshot Texts"></a>Screenshot Texts</h3><ol><li>“Clean Interface, One-Tap Start”</li><li>“Customize Your Exercise &amp; Rest Time”</li><li>“Clear Visual Progress Display”</li><li>“Apple Watch Support for On-the-Go”</li><li>“Professional Interval Training Experience”</li></ol><h3 id="Category-Suggestions"><a href="#Category-Suggestions" class="headerlink" title="Category Suggestions"></a>Category Suggestions</h3><p>Primary: Health &amp; Fitness<br>Secondary: Sports</p><h3 id="Age-Rating"><a href="#Age-Rating" class="headerlink" title="Age Rating"></a>Age Rating</h3><p>4+</p><h3 id="What’s-New-For-future-updates"><a href="#What’s-New-For-future-updates" class="headerlink" title="What’s New (For future updates)"></a>What’s New (For future updates)</h3><p>• Enhanced visual feedback<br>• Improved Apple Watch integration<br>• Performance optimizations<br>• Bug fixes and stability improvements</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hadlock 公式</title>
    <link href="/2025/02/21/Hadlock%20%E5%85%AC%E5%BC%8F/"/>
    <url>/2025/02/21/Hadlock%20%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Hadlock 公式是一种用于估算胎儿体重的常用方法，它基于超声测量数据。这个公式由美国妇产科医生 Frank Hadlock 提出，并经过多次修订。</p><p><strong>Hadlock 公式</strong></p><p>Hadlock 公式有多个版本，最常用的是 Hadlock I 公式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Log10</span>(体重) = <span class="hljs-number">1</span>.<span class="hljs-number">3596</span> - <span class="hljs-number">0</span>.<span class="hljs-number">00386</span> * AC * FL + <span class="hljs-number">0</span>.<span class="hljs-number">0064</span> * HC + <span class="hljs-number">0</span>.<span class="hljs-number">00061</span> * BPD * AC + <span class="hljs-number">0</span>.<span class="hljs-number">0424</span> * AC + <span class="hljs-number">0</span>.<span class="hljs-number">174</span> * FL<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>AC：腹围（cm）</li><li>FL：股骨长（cm）</li><li>HC：头围（cm）</li><li>BPD：双顶径（cm）</li></ul><p><strong>使用方法</strong></p><ol><li>通过超声检查测量胎儿的 AC、FL、HC 和 BPD。</li><li>将测量数据代入 Hadlock I 公式。</li><li>计算得出 Log10(体重) 的值。</li><li>通过计算 10 的 Log10(体重) 次方，得出胎儿的估计体重（克）。</li></ol><p><strong>注意事项</strong></p><ul><li>Hadlock 公式只是一种估算方法，可能存在一定的误差。</li><li>胎儿体重受到多种因素的影响，包括遗传、孕妇健康状况、胎盘功能等。</li><li>超声测量的准确性也会影响胎儿体重估算的准确性。</li><li>如有疑虑，应咨询医生或专业人士的意见。</li></ul><p><strong>其他 Hadlock 公式</strong></p><p>除了 Hadlock I 公式外，还有其他一些版本，如 Hadlock II、Hadlock III 和 Hadlock IV 公式。这些公式使用的参数和计算方法略有不同，但目的都是为了估算胎儿体重。</p><p><strong>总结</strong></p><p>Hadlock 公式是产科临床中常用的胎儿体重估算方法之一。通过超声测量胎儿的 AC、FL、HC 和 BPD，代入相应的公式，可以计算出胎儿的估计体重。但需要注意的是，这只是一种估算方法，可能存在一定的误差，如有疑虑应咨询医生或专业人士的意见。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>非消耗型内购的使用</title>
    <link href="/2025/02/03/%E9%9D%9E%E6%B6%88%E8%80%97%E5%9E%8B%E5%86%85%E8%B4%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/02/03/%E9%9D%9E%E6%B6%88%E8%80%97%E5%9E%8B%E5%86%85%E8%B4%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在 iOS 应用中，<strong>非消耗型内购</strong>通常用于一次性购买永久解锁的功能或内容。以下是一个使用 SwiftUI 实现非消耗型内购的简单示例。</p><hr><h3 id="示例场景"><a href="#示例场景" class="headerlink" title="示例场景"></a>示例场景</h3><p>假设我们有一个应用，用户可以通过内购永久解锁“高级功能”。</p><hr><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="1-在-App-Store-Connect-中配置内购项目"><a href="#1-在-App-Store-Connect-中配置内购项目" class="headerlink" title="1. 在 App Store Connect 中配置内购项目"></a>1. 在 App Store Connect 中配置内购项目</h4><ul><li>登录 <a href="https://appstoreconnect.apple.com/">App Store Connect</a>。</li><li>为你的应用创建一个非消耗型内购项目（例如，ID 为 <code>com.yourapp.premium</code>）。</li></ul><h4 id="2-在-Xcode-中启用内购功能"><a href="#2-在-Xcode-中启用内购功能" class="headerlink" title="2. 在 Xcode 中启用内购功能"></a>2. 在 Xcode 中启用内购功能</h4><ul><li>打开 Xcode 项目。</li><li>在 <code>Signing &amp; Capabilities</code> 中添加 <code>In-App Purchase</code> 能力。</li></ul><p>上面的代码使用的是 <strong>StoreKit 1</strong>，而不是最新的 <strong>StoreKit 2</strong>。StoreKit 2 是 Apple 在 WWDC 2021 推出的新版本，提供了更简洁、现代化的 API，并且完全基于 Swift 的异步编程模型（<code>async/await</code>）。</p><p>如果你希望使用 <strong>StoreKit 2</strong> 来实现非消耗型内购，以下是更新后的代码示例：</p><hr><h3 id="StoreKit-2-实现非消耗型内购"><a href="#StoreKit-2-实现非消耗型内购" class="headerlink" title="StoreKit 2 实现非消耗型内购"></a>StoreKit 2 实现非消耗型内购</h3><h4 id="1-配置内购项目"><a href="#1-配置内购项目" class="headerlink" title="1. 配置内购项目"></a>1. 配置内购项目</h4><ul><li>在 App Store Connect 中创建非消耗型内购项目（例如，ID 为 <code>com.yourapp.premium</code>）。</li></ul><h4 id="2-使用-StoreKit-2-实现内购逻辑"><a href="#2-使用-StoreKit-2-实现内购逻辑" class="headerlink" title="2. 使用 StoreKit 2 实现内购逻辑"></a>2. 使用 StoreKit 2 实现内购逻辑</h4><p>以下是基于 StoreKit 2 的 SwiftUI 实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> SwiftUI<br><span class="hljs-keyword">import</span> StoreKit<br><br><span class="hljs-meta">@MainActor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreManager</span>: <span class="hljs-title class_ inherited__">ObservableObject</span> &#123;<br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> products: [<span class="hljs-type">Product</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-meta">@Published</span> <span class="hljs-keyword">var</span> isPremiumUnlocked: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> updates: <span class="hljs-type">Task</span>&lt;<span class="hljs-type">Void</span>, <span class="hljs-type">Never</span>&gt;? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <br>    <span class="hljs-keyword">init</span>() &#123;<br>        updates <span class="hljs-operator">=</span> observeTransactionUpdates()<br>        fetchProducts()<br>        checkUnlockedStatus()<br>    &#125;<br>    <br>    <span class="hljs-keyword">deinit</span> &#123;<br>        updates<span class="hljs-operator">?</span>.cancel()<br>    &#125;<br>    <br>    <span class="hljs-comment">// 获取内购产品</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">fetchProducts</span>() &#123;<br>        <span class="hljs-type">Task</span> &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">let</span> productIDs <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;com.yourapp.premium&quot;</span>] <span class="hljs-comment">// 替换为你的内购 ID</span><br>                products <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">await</span> <span class="hljs-type">Product</span>.products(for: productIDs)<br>            &#125; <span class="hljs-keyword">catch</span> &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to fetch products: <span class="hljs-subst">\(error)</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 购买产品</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">purchase</span>(<span class="hljs-params">product</span>: <span class="hljs-type">Product</span>) &#123;<br>        <span class="hljs-type">Task</span> &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">await</span> product.purchase()<br>                <span class="hljs-keyword">switch</span> result &#123;<br>                <span class="hljs-keyword">case</span> .success(<span class="hljs-keyword">let</span> verification):<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">case</span> .verified(<span class="hljs-keyword">let</span> transaction) <span class="hljs-operator">=</span> verification &#123;<br>                        <span class="hljs-keyword">await</span> transaction.finish()<br>                        unlockPremium()<br>                    &#125;<br>                <span class="hljs-keyword">case</span> .pending:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Purchase is pending (e.g., waiting for parental approval)&quot;</span>)<br>                <span class="hljs-keyword">case</span> .userCancelled:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;User cancelled the purchase&quot;</span>)<br>                <span class="hljs-keyword">@unknown</span> <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Purchase failed: <span class="hljs-subst">\(error)</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 恢复购买</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">restorePurchases</span>() &#123;<br>        <span class="hljs-type">Task</span> &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-keyword">try</span> <span class="hljs-keyword">await</span> <span class="hljs-type">AppStore</span>.sync()<br>                checkUnlockedStatus()<br>            &#125; <span class="hljs-keyword">catch</span> &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to restore purchases: <span class="hljs-subst">\(error)</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 检查是否已解锁高级功能</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">checkUnlockedStatus</span>() &#123;<br>        <span class="hljs-type">Task</span> &#123;<br>            <span class="hljs-keyword">let</span> productIDs <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;com.yourapp.premium&quot;</span>] <span class="hljs-comment">// 替换为你的内购 ID</span><br>            <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> result <span class="hljs-keyword">in</span> <span class="hljs-type">Transaction</span>.currentEntitlements(for: productIDs) &#123;<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">case</span> .verified(<span class="hljs-keyword">let</span> transaction) <span class="hljs-operator">=</span> result, transaction.revocationDate <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                    <span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>                        <span class="hljs-keyword">self</span>.isPremiumUnlocked <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>                        <span class="hljs-type">UserDefaults</span>.standard.set(<span class="hljs-literal">true</span>, forKey: <span class="hljs-string">&quot;isPremiumUnlocked&quot;</span>)<br>                    &#125;<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 解锁高级功能</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">unlockPremium</span>() &#123;<br>        <span class="hljs-type">DispatchQueue</span>.main.async &#123;<br>            <span class="hljs-keyword">self</span>.isPremiumUnlocked <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            <span class="hljs-type">UserDefaults</span>.standard.set(<span class="hljs-literal">true</span>, forKey: <span class="hljs-string">&quot;isPremiumUnlocked&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 监听交易更新</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">observeTransactionUpdates</span>() -&gt; <span class="hljs-type">Task</span>&lt;<span class="hljs-type">Void</span>, <span class="hljs-type">Never</span>&gt; &#123;<br>        <span class="hljs-type">Task</span> &#123;<br>            <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> verification <span class="hljs-keyword">in</span> <span class="hljs-type">Transaction</span>.updates &#123;<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">case</span> .verified(<span class="hljs-keyword">let</span> transaction) <span class="hljs-operator">=</span> verification &#123;<br>                    <span class="hljs-keyword">await</span> transaction.finish()<br>                    checkUnlockedStatus()<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@StateObject</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> storeManager <span class="hljs-operator">=</span> <span class="hljs-type">StoreManager</span>()<br>    <br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-keyword">if</span> storeManager.isPremiumUnlocked &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;高级功能已解锁！&quot;</span>)<br>                    .font(.title)<br>                    .padding()<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;解锁高级功能&quot;</span>)<br>                    .font(.title)<br>                    .padding()<br>                <br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> product <span class="hljs-operator">=</span> storeManager.products.first &#123;<br>                    <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;购买 <span class="hljs-subst">\(product.displayName)</span> - <span class="hljs-subst">\(product.displayPrice)</span>&quot;</span>) &#123;<br>                        storeManager.purchase(product: product)<br>                    &#125;<br>                    .padding()<br>                &#125;<br>                <br>                <span class="hljs-type">Button</span>(<span class="hljs-string">&quot;恢复购买&quot;</span>) &#123;<br>                    storeManager.restorePurchases()<br>                &#125;<br>                .padding()<br>            &#125;<br>        &#125;<br>        .onAppear &#123;<br>            <span class="hljs-comment">// 检查是否已解锁高级功能</span><br>            storeManager.isPremiumUnlocked <span class="hljs-operator">=</span> <span class="hljs-type">UserDefaults</span>.standard.bool(forKey: <span class="hljs-string">&quot;isPremiumUnlocked&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@main</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">InAppPurchaseDemoApp</span>: <span class="hljs-title class_ inherited__">App</span> &#123;<br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">Scene</span> &#123;<br>        <span class="hljs-type">WindowGroup</span> &#123;<br>            <span class="hljs-type">ContentView</span>()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="StoreKit-2-的核心改进"><a href="#StoreKit-2-的核心改进" class="headerlink" title="StoreKit 2 的核心改进"></a>StoreKit 2 的核心改进</h3><ol><li><p><strong>基于 <code>async/await</code> 的异步编程</strong>：</p><ul><li>StoreKit 2 完全支持 Swift 的 <code>async/await</code>，代码更简洁易读。</li><li>例如，<code>Product.products(for:)</code> 和 <code>product.purchase()</code> 都是异步方法。</li></ul></li><li><p><strong>简化的交易管理</strong>：</p><ul><li>使用 <code>Transaction.currentEntitlements(for:)</code> 检查用户当前的购买状态。</li><li>使用 <code>Transaction.updates</code> 监听交易更新。</li></ul></li><li><p><strong>自动验证交易</strong>：</p><ul><li>StoreKit 2 会自动验证交易，开发者无需手动处理收据验证。</li></ul></li><li><p><strong>更安全的 API</strong>：</p><ul><li>StoreKit 2 提供了更安全的 API，减少开发者的错误使用。</li></ul></li></ol><hr><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><p><strong><code>StoreManager</code></strong>:</p><ul><li>使用 <code>@MainActor</code> 确保 UI 更新在主线程执行。</li><li>通过 <code>Product.products(for:)</code> 获取内购产品。</li><li>使用 <code>product.purchase()</code> 发起购买。</li><li>通过 <code>Transaction.currentEntitlements(for:)</code> 检查用户是否已购买。</li></ul></li><li><p><strong><code>ContentView</code></strong>:</p><ul><li>显示 UI，包括购买按钮和恢复购买按钮。</li><li>根据 <code>isPremiumUnlocked</code> 状态显示不同的内容。</li></ul></li><li><p><strong><code>UserDefaults</code></strong>:</p><ul><li>用于持久化存储用户是否已解锁高级功能。</li></ul></li></ol><hr><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><ol><li>应用启动时，检查是否已解锁高级功能。</li><li>显示购买按钮，用户可以点击购买。</li><li>购买成功后，解锁高级功能并更新 UI。</li><li>用户可以通过“恢复购买”按钮恢复之前的购买。</li></ol><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在真实应用中，建议将购买状态存储在服务器或使用更安全的方式（如 Keychain）。</li><li>测试时，使用沙盒账户进行内购测试。</li><li>确保在 App Store Connect 中正确配置内购项目。</li></ul><p>如果你有其他问题，欢迎随时提问！</p><p>当然！以下是对你提供的代码的详细分析。我们将从代码结构、功能实现、潜在问题和改进建议等方面进行探讨。</p><hr><h3 id="代码结构分析"><a href="#代码结构分析" class="headerlink" title="代码结构分析"></a>代码结构分析</h3><h4 id="1-StoreManager-类"><a href="#1-StoreManager-类" class="headerlink" title="1. StoreManager 类"></a>1. <strong><code>StoreManager</code> 类</strong></h4><ul><li><strong>职责</strong>：管理内购逻辑，包括获取产品、处理购买、恢复购买和检查购买状态。</li><li><strong>关键属性</strong>：<ul><li><code>products: [Product]</code>：存储从 App Store 获取的内购产品。</li><li><code>isPremiumUnlocked: Bool</code>：表示用户是否已解锁高级功能。</li></ul></li><li><strong>关键方法</strong>：<ul><li><code>fetchProducts()</code>：异步获取内购产品。</li><li><code>purchase(product:)</code>：发起购买请求。</li><li><code>restorePurchases()</code>：恢复购买。</li><li><code>checkUnlockedStatus()</code>：检查用户是否已解锁高级功能。</li><li><code>unlockPremium()</code>：解锁高级功能并更新状态。</li><li><code>observeTransactionUpdates()</code>：监听交易更新。</li></ul></li></ul><h4 id="2-ContentView-视图"><a href="#2-ContentView-视图" class="headerlink" title="2. ContentView 视图"></a>2. <strong><code>ContentView</code> 视图</strong></h4><ul><li><strong>职责</strong>：显示 UI，包括购买按钮和恢复购买按钮。</li><li><strong>关键逻辑</strong>：<ul><li>根据 <code>isPremiumUnlocked</code> 状态显示不同的内容。</li><li>调用 <code>StoreManager</code> 的方法处理用户操作。</li></ul></li></ul><h4 id="3-UserDefaults"><a href="#3-UserDefaults" class="headerlink" title="3. UserDefaults"></a>3. <strong><code>UserDefaults</code></strong></h4><ul><li><strong>用途</strong>：持久化存储用户是否已解锁高级功能。</li></ul><hr><h3 id="功能实现分析"><a href="#功能实现分析" class="headerlink" title="功能实现分析"></a>功能实现分析</h3><h4 id="1-获取内购产品"><a href="#1-获取内购产品" class="headerlink" title="1. 获取内购产品"></a>1. <strong>获取内购产品</strong></h4><ul><li>通过 <code>Product.products(for:)</code> 异步获取内购产品。</li><li>将获取到的产品存储在 <code>products</code> 数组中。</li></ul><h4 id="2-发起购买"><a href="#2-发起购买" class="headerlink" title="2. 发起购买"></a>2. <strong>发起购买</strong></h4><ul><li>使用 <code>product.purchase()</code> 发起购买请求。</li><li>处理购买结果：<ul><li>如果购买成功，调用 <code>unlockPremium()</code> 解锁高级功能。</li><li>如果购买失败或用户取消，打印错误信息。</li></ul></li></ul><h4 id="3-恢复购买"><a href="#3-恢复购买" class="headerlink" title="3. 恢复购买"></a>3. <strong>恢复购买</strong></h4><ul><li>使用 <code>AppStore.sync()</code> 同步用户的购买记录。</li><li>调用 <code>checkUnlockedStatus()</code> 检查用户是否已解锁高级功能。</li></ul><h4 id="4-检查购买状态"><a href="#4-检查购买状态" class="headerlink" title="4. 检查购买状态"></a>4. <strong>检查购买状态</strong></h4><ul><li>使用 <code>Transaction.currentEntitlements(for:)</code> 检查用户当前的购买状态。</li><li>如果找到有效的交易记录，解锁高级功能。</li></ul><h4 id="5-监听交易更新"><a href="#5-监听交易更新" class="headerlink" title="5. 监听交易更新"></a>5. <strong>监听交易更新</strong></h4><ul><li>使用 <code>Transaction.updates</code> 监听交易更新。</li><li>如果交易状态发生变化（例如退款或撤销），更新购买状态。</li></ul><hr><h3 id="潜在问题分析"><a href="#潜在问题分析" class="headerlink" title="潜在问题分析"></a>潜在问题分析</h3><h4 id="1-UserDefaults-的安全性"><a href="#1-UserDefaults-的安全性" class="headerlink" title="1. UserDefaults 的安全性"></a>1. <strong><code>UserDefaults</code> 的安全性</strong></h4><ul><li><strong>问题</strong>：<code>UserDefaults</code> 不是存储敏感数据（如购买状态）的安全方式。</li><li><strong>建议</strong>：使用更安全的方式（如 Keychain）存储购买状态。</li></ul><h4 id="2-未处理网络错误"><a href="#2-未处理网络错误" class="headerlink" title="2. 未处理网络错误"></a>2. <strong>未处理网络错误</strong></h4><ul><li><strong>问题</strong>：在 <code>fetchProducts()</code> 和 <code>purchase(product:)</code> 中，网络错误可能导致功能异常。</li><li><strong>建议</strong>：添加更详细的错误处理逻辑，并向用户显示友好的错误提示。</li></ul><h4 id="3-未处理退款或撤销"><a href="#3-未处理退款或撤销" class="headerlink" title="3. 未处理退款或撤销"></a>3. <strong>未处理退款或撤销</strong></h4><ul><li><strong>问题</strong>：如果用户退款或撤销购买，代码中没有显式处理这种情况。</li><li><strong>建议</strong>：在 <code>observeTransactionUpdates()</code> 中检查 <code>transaction.revocationDate</code>，并根据需要锁定高级功能。</li></ul><h4 id="4-未处理多产品场景"><a href="#4-未处理多产品场景" class="headerlink" title="4. 未处理多产品场景"></a>4. <strong>未处理多产品场景</strong></h4><ul><li><strong>问题</strong>：代码假设只有一个内购产品（<code>com.yourapp.premium</code>），无法处理多个产品。</li><li><strong>建议</strong>：扩展代码以支持多个产品，并根据产品 ID 动态更新 UI。</li></ul><h4 id="5-未处理沙盒测试"><a href="#5-未处理沙盒测试" class="headerlink" title="5. 未处理沙盒测试"></a>5. <strong>未处理沙盒测试</strong></h4><ul><li><strong>问题</strong>：代码中没有明确区分沙盒环境和生产环境。</li><li><strong>建议</strong>：在测试时，确保使用沙盒账户，并添加日志以帮助调试。</li></ul><hr><h3 id="改进建议"><a href="#改进建议" class="headerlink" title="改进建议"></a>改进建议</h3><h4 id="1-使用-Keychain-存储购买状态"><a href="#1-使用-Keychain-存储购买状态" class="headerlink" title="1. 使用 Keychain 存储购买状态"></a>1. <strong>使用 Keychain 存储购买状态</strong></h4><ul><li>替换 <code>UserDefaults</code>，使用 Keychain 存储购买状态，提高安全性。</li></ul><h4 id="2-增强错误处理"><a href="#2-增强错误处理" class="headerlink" title="2. 增强错误处理"></a>2. <strong>增强错误处理</strong></h4><ul><li>在 <code>fetchProducts()</code> 和 <code>purchase(product:)</code> 中添加详细的错误处理逻辑。</li><li>向用户显示友好的错误提示。</li></ul><h4 id="3-处理退款或撤销"><a href="#3-处理退款或撤销" class="headerlink" title="3. 处理退款或撤销"></a>3. <strong>处理退款或撤销</strong></h4><ul><li>在 <code>observeTransactionUpdates()</code> 中检查 <code>transaction.revocationDate</code>，并根据需要锁定高级功能。</li></ul><h4 id="4-支持多产品"><a href="#4-支持多产品" class="headerlink" title="4. 支持多产品"></a>4. <strong>支持多产品</strong></h4><ul><li>扩展代码以支持多个内购产品，并根据产品 ID 动态更新 UI。</li></ul><h4 id="5-添加沙盒测试支持"><a href="#5-添加沙盒测试支持" class="headerlink" title="5. 添加沙盒测试支持"></a>5. <strong>添加沙盒测试支持</strong></h4><ul><li>在测试时，确保使用沙盒账户，并添加日志以帮助调试。</li></ul><hr><h3 id="改进后的代码示例"><a href="#改进后的代码示例" class="headerlink" title="改进后的代码示例"></a>改进后的代码示例</h3><p>以下是改进后的部分代码：</p><h4 id="使用-Keychain-存储购买状态"><a href="#使用-Keychain-存储购买状态" class="headerlink" title="使用 Keychain 存储购买状态"></a>使用 Keychain 存储购买状态</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> Security<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">saveToKeychain</span>(<span class="hljs-params">key</span>: <span class="hljs-type">String</span>, <span class="hljs-params">value</span>: <span class="hljs-type">Bool</span>) &#123;<br>    <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> <span class="hljs-type">Data</span>(<span class="hljs-type">String</span>(value).utf8)<br>    <span class="hljs-keyword">let</span> query: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [<br>        kSecClass <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecClassGenericPassword,<br>        kSecAttrAccount <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: key,<br>        kSecValueData <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: data<br>    ]<br>    <span class="hljs-type">SecItemDelete</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>)<br>    <span class="hljs-type">SecItemAdd</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">loadFromKeychain</span>(<span class="hljs-params">key</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Bool</span> &#123;<br>    <span class="hljs-keyword">let</span> query: [<span class="hljs-type">String</span>: <span class="hljs-keyword">Any</span>] <span class="hljs-operator">=</span> [<br>        kSecClass <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecClassGenericPassword,<br>        kSecAttrAccount <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: key,<br>        kSecReturnData <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kCFBooleanTrue<span class="hljs-operator">!</span>,<br>        kSecMatchLimit <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>: kSecMatchLimitOne<br>    ]<br>    <span class="hljs-keyword">var</span> dataTypeRef: <span class="hljs-type">AnyObject</span>?<br>    <span class="hljs-keyword">let</span> status <span class="hljs-operator">=</span> <span class="hljs-type">SecItemCopyMatching</span>(query <span class="hljs-keyword">as</span> <span class="hljs-type">CFDictionary</span>, <span class="hljs-operator">&amp;</span>dataTypeRef)<br>    <span class="hljs-keyword">if</span> status <span class="hljs-operator">==</span> errSecSuccess, <span class="hljs-keyword">let</span> data <span class="hljs-operator">=</span> dataTypeRef <span class="hljs-keyword">as?</span> <span class="hljs-type">Data</span>, <span class="hljs-keyword">let</span> value <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(data: data, encoding: .utf8) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Bool</span>(value) <span class="hljs-operator">??</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="增强错误处理"><a href="#增强错误处理" class="headerlink" title="增强错误处理"></a>增强错误处理</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">purchase</span>(<span class="hljs-params">product</span>: <span class="hljs-type">Product</span>) &#123;<br>    <span class="hljs-type">Task</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">await</span> product.purchase()<br>            <span class="hljs-keyword">switch</span> result &#123;<br>            <span class="hljs-keyword">case</span> .success(<span class="hljs-keyword">let</span> verification):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">case</span> .verified(<span class="hljs-keyword">let</span> transaction) <span class="hljs-operator">=</span> verification &#123;<br>                    <span class="hljs-keyword">await</span> transaction.finish()<br>                    unlockPremium()<br>                &#125;<br>            <span class="hljs-keyword">case</span> .pending:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Purchase is pending (e.g., waiting for parental approval)&quot;</span>)<br>            <span class="hljs-keyword">case</span> .userCancelled:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;User cancelled the purchase&quot;</span>)<br>            <span class="hljs-keyword">@unknown</span> <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Purchase failed: <span class="hljs-subst">\(error)</span>&quot;</span>)<br>            <span class="hljs-comment">// 显示友好的错误提示</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>你的代码已经实现了基本的内购功能，但可以通过以下方式进一步改进：</p><ol><li>提高购买状态存储的安全性。</li><li>增强错误处理和用户提示。</li><li>支持多产品和处理退款&#x2F;撤销。</li><li>优化沙盒测试支持。</li></ol><p>如果你有其他问题或需要进一步的帮助，欢迎随时提问！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pmset 详细介绍</title>
    <link href="/2025/01/08/pmset%20%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/01/08/pmset%20%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p><code>pmset</code> 是 macOS 中用于管理电源管理设置（Power Management Settings）的命令行工具。通过 <code>pmset</code>，用户可以查看和调整系统的睡眠、唤醒、电池使用等电源相关行为。它对于开发者、系统管理员以及需要精细控制电源设置的用户非常有用。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>pmset</code> 命令的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset [选项] [参数]<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li><p><strong>查看当前电源设置</strong></p><p>要查看当前的电源管理设置，可以直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset -g<br></code></pre></td></tr></table></figure><p>这会显示当前的电源配置文件（Battery 和 AC Power）以及相关的设置。</p></li><li><p><strong>查看详细的电源状态</strong></p><p>要查看更详细的电源状态信息，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pmset -g everything<br></code></pre></td></tr></table></figure><p>这会显示包括电池状态、睡眠计时器、电源适配器状态等详细信息。</p></li><li><p><strong>修改电源设置</strong></p><p>你可以使用 <code>pmset</code> 来修改电源管理设置。例如，要修改睡眠时间，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset <span class="hljs-built_in">sleep</span> &lt;分钟&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>&lt;分钟&gt;</code> 是你希望系统在无操作后进入睡眠的时间。</p></li><li><p><strong>禁用或启用睡眠</strong></p><p>你可以禁用或启用系统的睡眠功能。例如，禁用睡眠：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset <span class="hljs-built_in">sleep</span> 0<br></code></pre></td></tr></table></figure><p>启用睡眠：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset <span class="hljs-built_in">sleep</span> 10<br></code></pre></td></tr></table></figure><p>这会将系统设置为在无操作 10 分钟后进入睡眠。</p></li><li><p><strong>设置显示器睡眠时间</strong></p><p>你可以单独设置显示器的睡眠时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset displaysleep &lt;分钟&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>设置硬盘睡眠时间</strong></p><p>你可以设置硬盘在无操作后进入睡眠的时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset disksleep &lt;分钟&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>防止系统睡眠</strong></p><p>如果你希望系统在某些情况下不进入睡眠（例如下载大文件时），可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset <span class="hljs-built_in">sleep</span> 0<br><span class="hljs-built_in">sudo</span> pmset displaysleep 0<br><span class="hljs-built_in">sudo</span> pmset disksleep 0<br></code></pre></td></tr></table></figure><p>这将禁用系统、显示器和硬盘的睡眠。</p></li><li><p><strong>恢复默认设置</strong></p><p>如果你想恢复系统的默认电源管理设置，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset restoredefaults<br></code></pre></td></tr></table></figure></li></ol><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul><li><code>-a</code>：应用于所有电源配置文件（Battery 和 AC Power）。</li><li><code>-b</code>：仅应用于电池电源配置文件。</li><li><code>-c</code>：仅应用于交流电源配置文件。</li><li><code>-u</code>：仅应用于 UPS 电源配置文件。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>设置系统在使用电池时 15 分钟后进入睡眠</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset -b <span class="hljs-built_in">sleep</span> 15<br></code></pre></td></tr></table></figure></li><li><p><strong>设置系统在连接电源时显示器 10 分钟后关闭</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset -c displaysleep 10<br></code></pre></td></tr></table></figure></li><li><p><strong>防止系统在使用电池时进入睡眠</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pmset -b <span class="hljs-built_in">sleep</span> 0<br></code></pre></td></tr></table></figure></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>修改电源设置通常需要管理员权限，因此大多数 <code>pmset</code> 命令需要加上 <code>sudo</code>。</li><li>不正确的电源设置可能会导致系统行为异常，因此在修改设置时要谨慎。</li><li><code>pmset</code> 的设置是临时的，重启后会恢复为系统默认设置，除非你将其写入启动脚本或配置文件。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>pmset</code> 是一个强大的工具，允许用户精细控制 macOS 的电源管理行为。通过它，你可以优化系统的电源使用，延长电池寿命，或根据特定需求调整系统的睡眠和唤醒行为。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 SwiftUI 中，@State 和 @Binding</title>
    <link href="/2025/01/02/SwiftUI%E4%B8%AD@State%E5%92%8C@Binding/"/>
    <url>/2025/01/02/SwiftUI%E4%B8%AD@State%E5%92%8C@Binding/</url>
    
    <content type="html"><![CDATA[<p>在 SwiftUI 中，<code>@State</code> 和 <code>@Binding</code> 是两个非常重要的属性包装器（Property Wrapper），它们用于管理视图的状态和数据流。以下是它们的详细解释：</p><h3 id="State"><a href="#State" class="headerlink" title="@State"></a><code>@State</code></h3><ul><li><p><strong>作用</strong>：<code>@State</code> 用于声明一个视图的私有状态。当 <code>@State</code> 修饰的变量发生变化时，SwiftUI 会自动重新渲染与该状态相关的视图部分。</p></li><li><p><strong>特点</strong>：</p><ul><li><code>@State</code> 是视图的私有状态，通常用于管理视图内部的临时数据。</li><li>当 <code>@State</code> 变量的值发生变化时，视图会自动更新。</li><li><code>@State</code> 通常用于简单的数据类型，如 <code>Int</code>、<code>String</code>、<code>Bool</code> 等。</li><li><code>@State</code> 变量只能在视图内部修改，外部无法直接访问或修改。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ContentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isOn: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Toggle</span>(<span class="hljs-string">&quot;Switch&quot;</span>, isOn: <span class="hljs-variable">$isOn</span>)<br>            .padding()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>isOn</code> 是一个 <code>@State</code> 变量，用于控制 <code>Toggle</code> 的开关状态。当用户切换 <code>Toggle</code> 时，<code>isOn</code> 的值会发生变化，视图会自动更新。</p></li></ul><h3 id="Binding"><a href="#Binding" class="headerlink" title="@Binding"></a><code>@Binding</code></h3><ul><li><p><strong>作用</strong>：<code>@Binding</code> 用于在视图之间共享状态。它允许一个视图读取和修改另一个视图的状态。</p></li><li><p><strong>特点</strong>：</p><ul><li><code>@Binding</code> 是一个引用类型，它不直接存储数据，而是引用另一个视图的状态。</li><li><code>@Binding</code> 通常用于父子视图之间的数据传递。</li><li><code>@Binding</code> 变量可以通过 <code>$</code> 符号从 <code>@State</code> 或其他 <code>@Binding</code> 变量中获取。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ChildView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@Binding</span> <span class="hljs-keyword">var</span> isOn: <span class="hljs-type">Bool</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">Toggle</span>(<span class="hljs-string">&quot;Switch&quot;</span>, isOn: <span class="hljs-variable">$isOn</span>)<br>            .padding()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ParentView</span>: <span class="hljs-title class_ inherited__">View</span> &#123;<br>    <span class="hljs-meta">@State</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> isOn: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-keyword">var</span> body: <span class="hljs-keyword">some</span> <span class="hljs-type">View</span> &#123;<br>        <span class="hljs-type">VStack</span> &#123;<br>            <span class="hljs-type">Text</span>(<span class="hljs-string">&quot;Parent View&quot;</span>)<br>            <span class="hljs-type">ChildView</span>(isOn: <span class="hljs-variable">$isOn</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>ParentView</code> 中的 <code>isOn</code> 是一个 <code>@State</code> 变量，它通过 <code>@Binding</code> 传递给 <code>ChildView</code>。<code>ChildView</code> 可以读取和修改 <code>isOn</code> 的值，并且这些变化会反映在 <code>ParentView</code> 中。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>**<code>@State</code>**：用于管理视图的私有状态，适合在视图内部使用。</li><li>**<code>@Binding</code>**：用于在视图之间共享状态，适合在父子视图之间传递数据。</li></ul><p>通过 <code>@State</code> 和 <code>@Binding</code>，SwiftUI 提供了一种简单而强大的方式来管理视图的状态和数据流，使得视图的更新和交互变得更加直观和高效。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>who 身高体重标准数据集</title>
    <link href="/2024/12/17/who%20%E8%BA%AB%E9%AB%98%E4%BD%93%E9%87%8D%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2024/12/17/who%20%E8%BA%AB%E9%AB%98%E4%BD%93%E9%87%8D%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>WHO 提供的完整儿童生长标准数据集可以在其官方网站上下载，包括各类指标（身高、体重、BMI）的完整百分位数据。以下是具体的获取方式：</p><hr><h3 id="官方资源地址"><a href="#官方资源地址" class="headerlink" title="官方资源地址"></a>官方资源地址</h3><ul><li><strong>WHO 儿童生长标准主页</strong><br> <a href="https://www.who.int/tools/child-growth-standards">WHO Child Growth Standards</a><br> 这是 WHO 官方提供的入口页面，包含 0-5 岁和 5-19 岁生长标准的详细信息和工具。</li><li><strong>数据下载页面</strong><ul><li>身高-for-年龄（0-5 岁和 5-19 岁）：<br> <a href="https://www.who.int/childgrowth/standards/height_for_age/en/">Height-for-age Tables</a></li><li>体重-for-年龄（0-5 岁）：<br> <a href="https://www.who.int/childgrowth/standards/weight_for_age/en/">Weight-for-age Tables</a></li><li>其他指标（体重-for-身高、BMI-for-年龄等）：<br> <a href="https://www.who.int/tools/child-growth-standards/standards">All Growth Standards Data</a></li></ul></li></ul><hr><h3 id="数据文件内容"><a href="#数据文件内容" class="headerlink" title="数据文件内容"></a>数据文件内容</h3><ul><li>文件格式：Excel (<code>.xls</code>)、PDF 或文本文件。</li><li>内容描述：<ul><li>每月（0-60 月龄）或每年（5-19 岁）的百分位数据，包括 P3、P15、P50、P85、P97 等。</li><li>数据适用于不同性别（男女分开）。</li></ul></li></ul><hr><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>下载对应数据表格，例如 <code>height_for_age</code> 或 <code>weight_for_age</code> 数据。</li><li>提取适合的范围（如 3%、50%、97% 百分位数据）。</li><li>将表格数据导入到 Swift 项目中，可以使用 CSV 格式或者直接写成 JSON。</li></ol><hr><h3 id="示例下载链接"><a href="#示例下载链接" class="headerlink" title="示例下载链接"></a>示例下载链接</h3><ul><li><strong>身高-for-年龄</strong>：<br> <a href="https://www.who.int/childgrowth/standards/chts_lhfa_boys_z_exp.pdf">Height-for-age Boys</a><br> <a href="https://www.who.int/childgrowth/standards/chts_lhfa_girls_z_exp.pdf">Height-for-age Girls</a></li><li><strong>体重-for-年龄</strong>：<br> <a href="https://www.who.int/childgrowth/standards/wfa_boys_z.pdf">Weight-for-age Boys</a><br> <a href="https://www.who.int/childgrowth/standards/wfa_girls_z.pdf">Weight-for-age Girls</a></li></ul><hr><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>如果需要，我可以帮你处理下载的 WHO 数据（例如将 Excel 转换为 JSON）并直接集成到 Swift 项目中。只需提供具体的需求或上传文件，我来协助！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
